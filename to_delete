#!/usr/bin/env python
# coding: utf-8

# In[34]:


get_ipython().system('git status')


# In[14]:


import usb.core


# In[13]:


get_ipython().system('pip install PyUSB')


# In[7]:


USB_Module =         {
          "sessionID" : 3956812906635032,
          "iManufacturer" : 1,
          "bNumConfigurations" : 1,
          "idProduct" : 30264,
          "bcdDevice" : 0,
          "Bus Power Available" : 250,
          "USB Address" : 27,
          "bMaxPacketSize0" : 64,
          "iProduct" : 2,
          "iSerialNumber" : 3,
          "bDeviceClass" : 0,
          "Built-In" : "No",
          "locationID" : 337641472,
          "bDeviceSubClass" : 0,
          "bcdUSB" : 272,
          "USB Product Name" : "USBKey Module",
          "PortNum" : 2,
          "non-removable" : "no",
          "IOCFPlugInTypes" : {"9dc7b780-9ec0-11d4-a54f-000a27052861":"IOUSBFamily.kext/Contents/PlugIns/IOUSBLib.bundle"},
          "bDeviceProtocol" : 0,
          "IOUserClientClass" : "IOUSBDeviceUserClientV2",
          "IOPowerManagement" : {"DevicePowerState":0,
                                 "CurrentPowerState":3,
                                 "CapabilityFlags":65536,
                                 "MaxPowerState":4,
                                 "DriverPowerState":3},
          "kUSBCurrentConfiguration" : 1,
          "Device Speed" : 1,
          "USB Vendor Name" : "USBKey Chip",
          "idVendor" : 8208,
          "IOGeneralInterest" : "IOCommand is not serializable",
          "USB Serial Number" : "202730041341",
          "IOClassNameOverride" : "IOUSBDevice",
        }


# In[18]:


import usb.backend


# In[ ]:


usb.backend


# In[ ]:


device


# In[26]:


import usb.core
import usb.util

VENDOR_ID = 0x0922
PRODUCT_ID = 0x8003

VENDOR_ID = USB_Module["idVendor"]
PRODUCT_ID = USB_Module["idProduct"]

# find the USB device
device = usb.core.find(idVendor=VENDOR_ID,
                       idProduct=PRODUCT_ID)


# In[29]:


for _ in device:
    print(_)


# In[33]:


c = 1
for config in device:
    print ('config', c)
    print ('Interfaces', config.bNumInterfaces)
    for i in range(config.bNumInterfaces):
        print (i)
        if device.is_kernel_driver_active(i):
            print ("activated")
        try:
            device.detach_kernel_driver(i)
            print ("detached")
        except Exception as e:
            print(e)
        print ("---")
    c+=1


# In[ ]:


çè!à&'à''(éè(
çè!à&'à''(éè(
))))


# In[25]:


import usb.core
import usb.util

VENDOR_ID = 0x0922
PRODUCT_ID = 0x8003

VENDOR_ID = USB_Module["idVendor"]
PRODUCT_ID = USB_Module["idProduct"]

# find the USB device
device = usb.core.find(idVendor=VENDOR_ID,
                       idProduct=PRODUCT_ID)

# use the first/default configuration
device.set_configuration()
# first endpoint
endpoint = device[0][(0,0)][0]
# read a data packet
attempts = 10
data = None
while data is None and attempts > 0:
    try:
        print("waiting for data")
        data = device.read(endpoint.bEndpointAddress,
                           endpoint.wMaxPacketSize)
        print(data)
    except usb.core.USBError as e:
        data = None
        if e.args == ('Operation timed out',):
            attempts -= 1
            continue
        print(e)

print (data)


# ##### device

# In[22]:


endpoint


# In[ ]:




